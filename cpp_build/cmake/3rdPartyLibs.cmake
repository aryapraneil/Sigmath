# this variable is used to keep absolute path to curent directory with cmake files
# varible initialized only when this file first time read
set(ASPOSE_CMAKE_FILES_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})

function(find_boost)
    if (boost_already_found)
        return()
    endif()
    # variable BOOST_ROOT=/some/path/to/boost used with custom built boost linkage
    if(NOT DEFINED BOOST_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/boost.name" BOOST_DIR_NAME)
        find_package(Boost REQUIRED COMPONENTS system chrono date_time locale thread filesystem CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${BOOST_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(Boost REQUIRED COMPONENTS system chrono date_time locale thread filesystem CONFIG PATHS ${BOOST_ROOT} NO_DEFAULT_PATH)
        message("Specific boost buld: BOOST_ROOT=${BOOST_ROOT}")
    endif()
    set(boost_already_found TRUE PARENT_SCOPE)
endfunction()

function(find_icu)
    if(NOT DEFINED ICU_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/icu.name" ICU_DIR_NAME)
        find_package(ICU REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${ICU_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(ICU REQUIRED CONFIG PATHS ${ICU_ROOT} NO_DEFAULT_PATH)
        message("Specific ICU buld: ICU_ROOT=${ICU_ROOT}")
    endif()
    # Propagate exported variables to the caller.
    set(ICU_BINARIES_RELEASE ${ICU_BINARIES_RELEASE} PARENT_SCOPE)
    set(ICU_BINARIES_DEBUG ${ICU_BINARIES_DEBUG} PARENT_SCOPE)
endfunction()

function(find_double_conversion)
    if(DEFINED DOUBLE_CONVERSION_ROOT)
        message(STATUS "Using DOUBLE_CONVERSION_ROOT value from cmake execute: ${DOUBLE_CONVERSION_ROOT}")
    elseif(DEFINED ENV{DOUBLE_CONVERSION_ROOT})
        set(DOUBLE_CONVERSION_ROOT $ENV{DOUBLE_CONVERSION_ROOT})
        message(STATUS "Using DOUBLE_CONVERSION_ROOT value from environment: ${DOUBLE_CONVERSION_ROOT}")
    endif()

    if(NOT DEFINED DOUBLE_CONVERSION_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/double-conversion.name" DOUBLE_CONVERSION_DIR_NAME)
        find_package(double-conversion REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${DOUBLE_CONVERSION_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(double-conversion REQUIRED CONFIG PATHS ${DOUBLE_CONVERSION_ROOT} NO_DEFAULT_PATH)
    endif()
endfunction()

function(find_zlib)
    if(DEFINED ZLIB_ROOT)
        message(STATUS "Using ZLIB_ROOT value from cmake execute: ${ZLIB_ROOT}")
    elseif(DEFINED ENV{ZLIB_ROOT})
        set(ZLIB_ROOT $ENV{ZLIB_ROOT})
        message(STATUS "Using ZLIB_ROOT value from environment: ${ZLIB_ROOT}")
    endif()

    if(NOT DEFINED ZLIB_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/zlib.name" ZLIB_DIR_NAME)
        find_package(ZLIB REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${ZLIB_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(ZLIB REQUIRED CONFIG PATHS ${ZLIB_ROOT} NO_DEFAULT_PATH)
    endif()        
endfunction()

function(find_brotli)
    if(DEFINED BROTLI_ROOT)
        message(STATUS "Using BROTLI_ROOT value from cmake execute: ${BROTLI_ROOT}")
    elseif(DEFINED ENV{BROTLI_ROOT})
        set(BROTLI_ROOT $ENV{BROTLI_ROOT})
        message(STATUS "Using BROTLI_ROOT value from environment: ${BROTLI_ROOT}")
    endif()

    if(NOT DEFINED BROTLI_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/brotli.name" BROTLI_DIR_NAME)
        find_package(brotli REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${BROTLI_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(brotli REQUIRED CONFIG PATHS ${BROTLI_ROOT} NO_DEFAULT_PATH)
    endif()
endfunction()

function(find_skia)
    if(DEFINED SKIA_ROOT)
        message(STATUS "Using SKIA_ROOT value from cmake execute: ${SKIA_ROOT}")
    elseif(DEFINED ENV{SKIA_ROOT})
        set(SKIA_ROOT $ENV{SKIA_ROOT})
        message(STATUS "Using SKIA_ROOT value from environment: ${SKIA_ROOT}")
    endif()

    if(NOT DEFINED SKIA_ROOT)
        if(NOT DEFINED SKIA_TESTING_ROOT)
            file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/skia.name" SKIA_DIR_NAME)
            find_package(Skia REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${SKIA_DIR_NAME} NO_DEFAULT_PATH)
        else()
            find_package(Skia REQUIRED CONFIG PATHS ${SKIA_TESTING_ROOT} NO_DEFAULT_PATH)
            message("Specific skia buld: SKIA_TESTING_ROOT=${SKIA_TESTING_ROOT}")
        endif()
    else()
        set(SKIA_ROOT ${SKIA_ROOT} PARENT_SCOPE)
        if(DEFINED TEST_SKIA)
            find_package(Skia REQUIRED CONFIG PATHS "${SKIA_ROOT}" NO_DEFAULT_PATH)
        endif()
    endif()
endfunction()

function(find_botan)
    if(TARGET botan::botan)
        return()
    endif()

    if(DEFINED BOTAN_ROOT)
        message(STATUS "Using BOTAN_ROOT value from cmake command line: ${BOTAN_ROOT}")
    elseif(DEFINED ENV{BOTAN_ROOT})
        set(BOTAN_ROOT $ENV{BOTAN_ROOT})
        message(STATUS "Using BOTAN_ROOT value from environment: ${BOTAN_ROOT}")
    endif()

    if(DEFINED BOTAN_ROOT)
        message(STATUS "Specific botan buld: BOTAN_ROOT=${BOTAN_ROOT}")
        if(EXISTS "${BOTAN_ROOT}/CMakeLists.txt")
            set(BOTAN_USES_CMAKELISTS ON PARENT_SCOPE)
            add_subdirectory(${BOTAN_ROOT} ${BOTAN_ROOT}/bin)
            add_library(botan::botan ALIAS botan)
        else()
            find_package(Botan REQUIRED CONFIG PATHS ${BOTAN_ROOT} NO_DEFAULT_PATH)
        endif()
    else()
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/botan.name" BOTAN_DIR_NAME)
        find_package(Botan REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${BOTAN_DIR_NAME} NO_DEFAULT_PATH)
    endif()
endfunction()

function(find_openssl)
    if(DEFINED OPENSSL_ROOT)
        message(STATUS "Using OPENSSL_ROOT value from cmake execute: ${OPENSSL_ROOT}")  
    elseif(DEFINED ENV{OPENSSL_ROOT})
        set(OPENSSL_ROOT $ENV{OPENSSL_ROOT})
        message(STATUS "Using OPENSSL_ROOT value from environment: ${OPENSSL_ROOT}")
    endif()

    if(NOT DEFINED OPENSSL_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/openssl.name" OPENSSL_DIR_NAME)
        find_package(OpenSSL REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${OPENSSL_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(OpenSSL REQUIRED CONFIG PATHS ${OPENSSL_ROOT} NO_DEFAULT_PATH)
    endif()
endfunction()

function(find_harfbuzz)
    if(DEFINED HARFBUZZ_ROOT)
        message(STATUS "Using HARFBUZZ_ROOT value from cmake execute: ${HARFBUZZ_ROOT}")
    elseif(DEFINED ENV{HARFBUZZ_ROOT})
        set(HARFBUZZ_ROOT $ENV{HARFBUZZ_ROOT})
        message(STATUS "Using HARFBUZZ_ROOT value from environment: ${HARFBUZZ_ROOT}")
    endif()

    if(NOT DEFINED HARFBUZZ_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/harfbuzz.name" HARFBUZZ_DIR_NAME)
        find_package(Harfbuzz REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${HARFBUZZ_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(Harfbuzz REQUIRED CONFIG PATHS ${HARFBUZZ_ROOT} NO_DEFAULT_PATH)
    endif()
endfunction()

function(find_pcre2)
    if(DEFINED PCRE2_ROOT)
        message(STATUS "Using PCRE2_ROOT value from cmake execute: ${PCRE2_ROOT}")
    elseif(DEFINED ENV{PCRE2_ROOT})
        set(PCRE2_ROOT $ENV{PCRE2_ROOT})
        message(STATUS "Using PCRE2_ROOT value from environment: ${PCRE2_ROOT}")
    endif()

    if(NOT DEFINED PCRE2_ROOT)
        file(STRINGS "${ASPOSE_CMAKE_FILES_DIRECTORY}/3rdpartydirnames/pcre2.name" PCRE2_DIR_NAME)
        find_package(pcre2 REQUIRED CONFIG PATHS ${ASPOSE_CPPLIBS_ROOT}/${PCRE2_DIR_NAME} NO_DEFAULT_PATH)
    else()
        find_package(pcre2 REQUIRED CONFIG PATHS ${PCRE2_ROOT} NO_DEFAULT_PATH)
    endif()
endfunction()
