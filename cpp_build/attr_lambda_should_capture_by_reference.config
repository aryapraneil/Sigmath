<!--If possible, every argument of the file receive lambdas that will capture variable by reference for project Sigmath-->
<porter>
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double Derivative(?, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double Integral(?, System.Double, System.Double, System.Int32)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double Limit(?, ?, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double Limit(?, ?, System.Double)" class="Sigmath.Calculus" parametername="g" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double FindRoot(?, System.Double, System.Double, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static * PartialDerivative(?, System.Int32, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static * Gradient(?, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static * Hessian(?, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double[] FindCriticalPoints(?, System.Double, System.Double, System.Double)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double RiemannSum(?, System.Double, System.Double, System.Int32, Sigmath.Calculus.RiemannSumType)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
  <attribute name="CppLambdaShouldCaptureByReference" method="static System.Double DefiniteIntegral(?, System.Double, System.Double, System.Int32)" class="Sigmath.Calculus" parametername="f" condition="parameter" />
</porter>